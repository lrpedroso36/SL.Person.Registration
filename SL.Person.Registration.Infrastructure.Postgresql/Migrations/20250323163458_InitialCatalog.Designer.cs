// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SL.Person.Registration.Infrastructure.Postgresql.Context;

#nullable disable

namespace SL.Person.Registration.Infrastructure.Postgresql.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250323163458_InitialCatalog")]
    partial class InitialCatalog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Number")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<Guid>("PersonRegistrationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PersonRegistrationId1")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("PersonRegistrationId1");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PersonRegistrationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Presence")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PersonRegistrationId");

                    b.ToTable("Assignments", (string)null);
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DDD")
                        .HasMaxLength(2)
                        .HasColumnType("integer");

                    b.Property<Guid>("PersonRegistrationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PersonRegistrationId1")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.HasIndex("PersonRegistrationId1");

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.Interview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasMaxLength(15)
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InterviewType")
                        .HasMaxLength(15)
                        .HasColumnType("integer");

                    b.Property<Guid>("InterviewerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Opinion")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid>("PersonRegistrationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasMaxLength(15)
                        .HasColumnType("integer");

                    b.Property<int>("TreatmentType")
                        .HasMaxLength(15)
                        .HasColumnType("integer");

                    b.Property<int>("WeakDayType")
                        .HasMaxLength(15)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InterviewerId")
                        .IsUnique();

                    b.HasIndex("PersonRegistrationId");

                    b.ToTable("Interviews", (string)null);
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.PersonRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BithDate")
                        .HasMaxLength(20)
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<long>("DocumentNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<Guid>("InterviewerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsExcluded")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactId");

                    b.ToTable("PersonRegistrations");
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.PersonRegistrationPersonType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonRegistrationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PersonRegistrationId");

                    b.HasIndex("PersonTypeId");

                    b.ToTable("PersonRegistrationPersonTypes", (string)null);
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.PersonType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("PersonTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("87565733-c273-4163-90b5-081ecc354170"),
                            Name = "Todos"
                        },
                        new
                        {
                            Id = new Guid("35b731eb-0895-4a94-86b0-4436fd80db4c"),
                            Name = "Tarefeiro"
                        },
                        new
                        {
                            Id = new Guid("03b340ee-292c-412a-b909-386eda4d99e3"),
                            Name = "Assistido"
                        },
                        new
                        {
                            Id = new Guid("21a7e47d-4781-48cc-a587-dfd55c5581e6"),
                            Name = "Palestrante"
                        },
                        new
                        {
                            Id = new Guid("dbacb66e-e460-48a8-b4e7-bbb6852859d9"),
                            Name = "Entrevistador"
                        });
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.Tratament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InterviewId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Presence")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.ToTable("Trataments", (string)null);
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.WorkSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DoTheReading")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PersonRegistrationId")
                        .HasColumnType("uuid");

                    b.Property<int>("WeakDayType")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonRegistrationId");

                    b.ToTable("WorkSchedules", (string)null);
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.Address", b =>
                {
                    b.HasOne("SL.Person.Registration.Domain.PersonAggregate.PersonRegistration", "PersonRegistration")
                        .WithMany()
                        .HasForeignKey("PersonRegistrationId1");

                    b.Navigation("PersonRegistration");
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.Assignment", b =>
                {
                    b.HasOne("SL.Person.Registration.Domain.PersonAggregate.PersonRegistration", "PersonRegistration")
                        .WithMany("Assignments")
                        .HasForeignKey("PersonRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonRegistration");
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.Contact", b =>
                {
                    b.HasOne("SL.Person.Registration.Domain.PersonAggregate.PersonRegistration", "PersonRegistration")
                        .WithMany()
                        .HasForeignKey("PersonRegistrationId1");

                    b.Navigation("PersonRegistration");
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.Interview", b =>
                {
                    b.HasOne("SL.Person.Registration.Domain.PersonAggregate.PersonRegistration", "Interviewer")
                        .WithOne("Interviewer")
                        .HasForeignKey("SL.Person.Registration.Domain.PersonAggregate.Interview", "InterviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SL.Person.Registration.Domain.PersonAggregate.PersonRegistration", "PersonRegistration")
                        .WithMany("Interviews")
                        .HasForeignKey("PersonRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interviewer");

                    b.Navigation("PersonRegistration");
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.PersonRegistration", b =>
                {
                    b.HasOne("SL.Person.Registration.Domain.PersonAggregate.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("SL.Person.Registration.Domain.PersonAggregate.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.PersonRegistrationPersonType", b =>
                {
                    b.HasOne("SL.Person.Registration.Domain.PersonAggregate.PersonRegistration", "PersonRegistration")
                        .WithMany("PersonRegistrationPersonTypes")
                        .HasForeignKey("PersonRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SL.Person.Registration.Domain.PersonAggregate.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonRegistration");

                    b.Navigation("PersonType");
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.Tratament", b =>
                {
                    b.HasOne("SL.Person.Registration.Domain.PersonAggregate.Interview", "Interview")
                        .WithMany("Trataments")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.WorkSchedule", b =>
                {
                    b.HasOne("SL.Person.Registration.Domain.PersonAggregate.PersonRegistration", "PersonRegistration")
                        .WithMany("WorkSchedules")
                        .HasForeignKey("PersonRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonRegistration");
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.Interview", b =>
                {
                    b.Navigation("Trataments");
                });

            modelBuilder.Entity("SL.Person.Registration.Domain.PersonAggregate.PersonRegistration", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Interviewer");

                    b.Navigation("Interviews");

                    b.Navigation("PersonRegistrationPersonTypes");

                    b.Navigation("WorkSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
